"""
Lookup tables are bitboards that allow us to mask or clear specific ranks, files, or positions of the chessboard
"""

from math import log2


pos_to_coords = {
    0: "A1",
    1: "B1",
    2: "C1",
    3: "D1",
    4: "E1",
    5: "F1",
    6: "G1",
    7: "H1",
    8: "A2",
    9: "B2",
    10: "C2",
    11: "D2",
    12: "E2",
    13: "F2",
    14: "G2",
    15: "H2",
    16: "A3",
    17: "B3",
    18: "C3",
    19: "D3",
    20: "E3",
    21: "F3",
    22: "G3",
    23: "H3",
    24: "A4",
    25: "B4",
    26: "C4",
    27: "D4",
    28: "E4",
    29: "F4",
    30: "G4",
    31: "H4",
    32: "A5",
    33: "B5",
    34: "C5",
    35: "D5",
    36: "E5",
    37: "F5",
    38: "G5",
    39: "H5",
    40: "A6",
    41: "B6",
    42: "C6",
    43: "D6",
    44: "E6",
    45: "F6",
    46: "G6",
    47: "H6",
    48: "A7",
    49: "B7",
    50: "C7",
    51: "D7",
    52: "E7",
    53: "F7",
    54: "G7",
    55: "H7",
    56: "A8",
    57: "B8",
    58: "C8",
    59: "D8",
    60: "E8",
    61: "F8",
    62: "G8",
    63: "H8",
}

coords_to_pos = {
    "A1": 0,
    "B1": 1,
    "C1": 2,
    "D1": 3,
    "E1": 4,
    "F1": 5,
    "G1": 6,
    "H1": 7,
    "A2": 8,
    "B2": 9,
    "C2": 10,
    "D2": 11,
    "E2": 12,
    "F2": 13,
    "G2": 14,
    "H2": 15,
    "A3": 16,
    "B3": 17,
    "C3": 18,
    "D3": 19,
    "E3": 20,
    "F3": 21,
    "G3": 22,
    "H3": 23,
    "A4": 24,
    "B4": 25,
    "C4": 26,
    "D4": 27,
    "E4": 28,
    "F4": 29,
    "G4": 30,
    "H4": 31,
    "A5": 32,
    "B5": 33,
    "C5": 34,
    "D5": 35,
    "E5": 36,
    "F5": 37,
    "G5": 38,
    "H5": 39,
    "A6": 40,
    "B6": 41,
    "C6": 42,
    "D6": 43,
    "E6": 44,
    "F6": 45,
    "G6": 46,
    "H6": 47,
    "A7": 48,
    "B7": 49,
    "C7": 50,
    "D7": 51,
    "E7": 52,
    "F7": 53,
    "G7": 54,
    "H7": 55,
    "A8": 56,
    "B8": 57,
    "C8": 58,
    "D8": 59,
    "E8": 60,
    "F8": 61,
    "G8": 62,
    "H8": 63,
}

clear_rank = {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
}

mask_rank = {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
}

clear_file = {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
}

mask_file = {
    1: 0,
    2: 0,
    3: 0,
    4: 0,
    5: 0,
    6: 0,
    7: 0,
    8: 0,
}

# Maps a board position with a binary number only having a 1 at that position
# Used to check if a particular position on a bitboard is 1 or 0
mask_position = {
    0: 1,
    1: 2,
    2: 4,
    3: 8,
    4: 16,
    5: 32,
    6: 64,
    7: 128,
    8: 256,
    9: 512,
    10: 1024,
    11: 2048,
    12: 4096,
    13: 8192,
    14: 16384,
    15: 32768,
    16: 65536,
    17: 131072,
    18: 262144,
    19: 524288,
    20: 1048576,
    21: 2097152,
    22: 4194304,
    23: 8388608,
    24: 16777216,
    25: 33554432,
    26: 67108864,
    27: 134217728,
    28: 268435456,
    29: 536870912,
    30: 1073741824,
    31: 2147483648,
    32: 4294967296,
    33: 8589934592,
    34: 17179869184,
    35: 34359738368,
    36: 68719476736,
    37: 137438953472,
    38: 274877906944,
    39: 549755813888,
    40: 1099511627776,
    41: 2199023255552,
    42: 4398046511104,
    43: 8796093022208,
    44: 17592186044416,
    45: 35184372088832,
    46: 70368744177664,
    47: 140737488355328,
    48: 281474976710656,
    49: 562949953421312,
    50: 1125899906842624,
    51: 2251799813685248,
    52: 4503599627370496,
    53: 9007199254740992,
    54: 18014398509481984,
    55: 36028797018963968,
    56: 72057594037927936,
    57: 144115188075855872,
    58: 288230376151711744,
    59: 576460752303423488,
    60: 1152921504606846976,
    61: 2305843009213693952,
    62: 4611686018427387904,
    63: 9223372036854775808,
}

# Maps a board position with a binary number only having a 0 at that position.
# Used to set a particular position on a bitboard to 0
clear_position = {
    0: 36893488147419103230,
    1: 36893488147419103229,
    2: 36893488147419103227,
    3: 36893488147419103223,
    4: 36893488147419103215,
    5: 36893488147419103199,
    6: 36893488147419103167,
    7: 36893488147419103103,
    8: 36893488147419102975,
    9: 36893488147419102719,
    10: 36893488147419102207,
    11: 36893488147419101183,
    12: 36893488147419099135,
    13: 36893488147419095039,
    14: 36893488147419086847,
    15: 36893488147419070463,
    16: 36893488147419037695,
    17: 36893488147418972159,
    18: 36893488147418841087,
    19: 36893488147418578943,
    20: 36893488147418054655,
    21: 36893488147417006079,
    22: 36893488147414908927,
    23: 36893488147410714623,
    24: 36893488147402326015,
    25: 36893488147385548799,
    26: 36893488147351994367,
    27: 36893488147284885503,
    28: 36893488147150667775,
    29: 36893488146882232319,
    30: 36893488146345361407,
    31: 36893488145271619583,
    32: 36893488143124135935,
    33: 36893488138829168639,
    34: 36893488130239234047,
    35: 36893488113059364863,
    36: 36893488078699626495,
    37: 36893488009980149759,
    38: 36893487872541196287,
    39: 36893487597663289343,
    40: 36893487047907475455,
    41: 36893485948395847679,
    42: 36893483749372592127,
    43: 36893479351326081023,
    44: 36893470555233058815,
    45: 36893452963047014399,
    46: 36893417778674925567,
    47: 36893347409930747903,
    48: 36893206672442392575,
    49: 36892925197465681919,
    50: 36892362247512260607,
    51: 36891236347605417983,
    52: 36888984547791732735,
    53: 36884480948164362239,
    54: 36875473748909621247,
    55: 36857459350400139263,
    56: 36821430553381175295,
    57: 36749372959343247359,
    58: 36605257771267391487,
    59: 36317027395115679743,
    60: 35740566642812256255,
    61: 34587645138205409279,
    62: 32281802128991715327,
    63: 27670116110564327423,
}


def get_rank(position: int) -> int:
    """
    Returns the rank of a position. position has to be a power of 2.
    Returns the rank which is in range [1, 8]
    """
    pos = int(log2(position))
    return int(pos / 8) + 1


def get_file(position: int) -> int:
    """
    Returns the file of a position. position has to be a power of 2.
    Returns the file which is in range [1, 8]
    """
    return (position % 8) + 1


def lsb_pos(board: int) -> int:
    """
    Clears all but the rightmost set bit on the board.
    i.e. - Returns 0000100 for 1010100
    """
    return board & ~(board - 1)
